*** app.py
--- app.py
***************
*** 1,12 ****
  # app.py — all-in-one chatbot + embeddable widget
  
  import os, time, csv, io
  from urllib.parse import urlparse
  
  from flask import Flask, request, jsonify, Response, send_from_directory
  from dotenv import load_dotenv
  from openai import OpenAI
  import requests
  
  # -----------------------
  # Setup
  # -----------------------
  load_dotenv()
  
  app = Flask(__name__, static_folder="static", static_url_path="")
  
  OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
  CSV_URL        = os.getenv("CSV_URL", "").strip()
  CACHE_TTL      = int(os.getenv("CACHE_TTL_SECONDS", "300"))  # seconds, default 5 min
--- 1,17 ----
  # app.py — all-in-one chatbot + embeddable widget
  
  import os, time, csv, io
  from urllib.parse import urlparse
  
  from flask import Flask, request, jsonify, Response, send_from_directory
  from dotenv import load_dotenv
  from openai import OpenAI
  import requests
+ from datetime import datetime
  
  # -----------------------
  # Setup
  # -----------------------
  load_dotenv()
  
  app = Flask(__name__, static_folder="static", static_url_path="")
  
  OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
  CSV_URL        = os.getenv("CSV_URL", "").strip()
  CACHE_TTL      = int(os.getenv("CACHE_TTL_SECONDS", "300"))  # seconds, default 5 min
+ ADMIN_TOKEN    = os.getenv("ADMIN_TOKEN", "").strip()
***************
*** 132,137 ****
      return jsonify({
          "csv_url": CSV_URL,
          "en_count": len(ctx["en"]),
          "es_count": len(ctx["es"]),
          "sample_en": ctx["en"][:3],
          "sample_es": ctx["es"][:3],
          "cached_at": _csv_cache["loaded_at"],
          "cache_ttl": CACHE_TTL,
      })
--- 137,186 ----
      return jsonify({
          "csv_url": CSV_URL,
          "en_count": len(ctx["en"]),
          "es_count": len(ctx["es"]),
+         "ja_count": len(ctx.get("ja", [])) if isinstance(ctx, dict) else 0,
          "sample_en": ctx["en"][:3],
          "sample_es": ctx["es"][:3],
+         "sample_ja": ctx.get("ja", [])[:3] if isinstance(ctx, dict) else [],
          "cached_at": _csv_cache["loaded_at"],
          "cache_ttl": CACHE_TTL,
      })
+ 
+ # --- Simple admin (optional token) ---
+ def _admin_allowed() -> bool:
+     if not ADMIN_TOKEN:
+         return True
+     token = (request.args.get("token") or "").strip()
+     return token == ADMIN_TOKEN
+ 
+ def _fmt_ts(ts: float) -> str:
+     if not ts: return "never"
+     try:
+         return datetime.utcfromtimestamp(ts).isoformat() + "Z"
+     except Exception:
+         return str(ts)
+ 
+ @app.get("/admin")
+ def admin():
+     if not _admin_allowed():
+         return ("forbidden", 403)
+     ctx = _get_bilingual_context()
+     en = len(ctx["en"]); es = len(ctx["es"]); ja = len(ctx.get("ja", []))
+     last = _fmt_ts(_csv_cache["loaded_at"])
+     hint = f"&token={ADMIN_TOKEN}" if ADMIN_TOKEN else ""
+     html = f"""
+ <!doctype html>
+ <meta charset="utf-8">
+ <title>Admin</title>
+ <style>
+ body{{font:14px/1.4 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;max-width:820px;margin:40px auto;padding:0 16px}}
+ pre,code{{background:#f6f7fb;padding:.25rem .5rem;border-radius:6px}}
+ .card{{background:#fff;border-radius:10px;box-shadow:0 10px 24px rgba(0,0,0,.08);padding:16px;margin-bottom:16px}}
+ button{{padding:.45rem .8rem;border-radius:8px;border:1px solid #e5e7eb;background:#111827;color:#fff;cursor:pointer}}
+ a{{color:#2563eb}}
+ </style>
+ <h1>Admin</h1>
+ <div class="card">
+   <div><b>CSV URL</b>: <code>{CSV_URL or '(not set)'}</code></div>
+   <div>Counts → EN: <b>{en}</b> · ES: <b>{es}</b> · JA: <b>{ja}</b></div>
+   <div>Last load: <code>{last}</code> (TTL: {CACHE_TTL}s)</div>
+ </div>
+ <div class="card">
+   <form method="post" action="/admin/flush{hint}">
+     <button>Flush CSV Cache</button>
+   </form>
+ </div>
+ <p><a href="/debug/csv">debug/csv</a> · <a href="/">home</a></p>
+ """
+     return html
+ 
+ @app.post("/admin/flush")
+ def admin_flush():
+     if not _admin_allowed():
+         return ("forbidden", 403)
+     _csv_cache.update({"loaded_at": 0.0, "en": [], "es": [], "ja": _csv_cache.get("ja", [])})
+     return 'Cache flushed. <a href="/admin">Back</a>'
